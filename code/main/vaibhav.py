weights= [[1.7739970035755939,
  -0.6095422918533304,
  -2.3671790476870287,
  0.011986086040857732],
 [0.2321482984810818,
  -0.05427886465903569,
  3.280528625238217,
  -0.0925511046866306],
 [0.316048929276088,
  -1.2474771031183485,
  4.458808726467958,
  0.22161632565754577],
 [-0.577478570857703,
  0.6852402495233487,
  -5.724548906487074,
  0.1622878438924124],
 [-0.019258808160198006,
  -0.25538730932042053,
  1.6337594708995091,
  0.22989905251033468],
 [-0.6359741978753813,
  0.431734286918238,
  0.9352363905973988,
  -0.009559979740374782],
 [0.30156223619822115,
  -0.033971920859715087,
  0.14733629505471188,
  0.12810548069493266],
 [-0.716654538093606,
  0.2752414688968343,
  -0.3147062415871562,
  0.18939379481387308],
 [0.3036309189362808,
  -0.6498822629456914,
  2.374347384590604,
  0.23148623703053664],
 [-0.11292552005555753,
  0.2040112430147911,
  3.639074865036793,
  -0.29483875755663597],
 [0.7342363015260243,
  -0.26641975069209467,
  3.9011871782876026,
  -0.23057613399606997],
 [-0.28754354604186305,
  0.6270940682318882,
  0.20885622252346123,
  -0.36107819069181524],
 [1.518755009194972,
  -1.9036736876134543,
  4.78332323412151,
  -0.02846408298430417],
 [0.3054961540253882,
  -0.3653630506350429,
  0.5826925868206534,
  0.2470174323174358],
 [0.005616174604300669,
  -0.12923672954383683,
  -2.997893616966996,
  0.3198101778595617],
 [-0.3781611439509331,
  0.2637562549677387,
  -0.3227762982998565,
  0.14736224723191696],
 [0.015374962996996732,
  -0.1700137694009428,
  -1.841869719613406,
  0.29323825700447737],
 [-0.2983682173528666,
  0.19803744730810746,
  0.9142208603351909,
  0.06459595689310746],
 [-0.8126409066965926,
  0.8286234869938877,
  -5.247215291908944,
  0.08044012100833145],
 [-0.3344972825784323,
  0.4365600396051664,
  -2.1231038967199027,
  0.10407723586432033],
 [-0.6840000558520294,
  0.7420076641860976,
  -2.468720579528836,
  -0.060902638531944206],
 [-0.5075540975020452,
  0.20714165259029374,
  1.5147889202328797,
  0.07245338354586293],
 [0.5715440082571109,
  -0.29214234943584455,
  0.9779170838504316,
  0.12541498085741498],
 [2.81449443994355,
  -2.5413094382008725,
  0.4030212894234419,
  -0.0975515098245882],
 [0.012918180310079401,
  1.130151837752541,
  -0.01755304231739679,
  -1.8777628403980156],
 [-0.7966732547154856,
  0.5479550305196884,
  -1.1774330000592872,
  0.0878500769666894],
 [-0.2106212402911059,
  0.4261186894582969,
  -2.4621102267347172,
  0.1296024293786319],
 [-0.7928531200245473,
  0.6266373953029303,
  -2.44016288417491,
  0.08684136406098597],
 [-1.0942781405390143,
  0.3058045347129765,
  -1.4061972132942304,
  0.25878033176919935],
 [-0.7603353025364068,
  0.8148016474458311,
  -0.6484384492493608,
  -0.31930103130063386],
 [0.11399532579551289,
  -0.2322184691494565,
  1.8048092811472305,
  0.18032745431583]]

bias =[-0.6933189766125624,-0.3452468272611826,-0.03436927515012385,-1.1061489203180643,-0.5963343136849848,-0.8441083277410916,-0.6271080125648192,-0.059346341451829196,1.5007300030213668,0.9907520427955212,1.5306025859372079,-0.37142397574116204,1.0616262549694493,0.7566907451699856,-1.3184651245650838,-1.1888497065904908,1.6923492619865963,1.8693589403255437,-0.44244287093019885,0.4412207190422979,0.5670954415351295,1.7109234054163502,0.6931712514422382,0.05795311874096986,0.0035147528801368947,-1.6682781322580105,-2.9872041795741686,-0.516903002882598,-0.3641559357308193,0.0934742976721873,0.19424110212219603]
 
def score(li):
    ans =[]
    for i in range(31):
        ans.append((li[0]* weights[i][0])+(li[1]* weights[i][1])+(li[2]* weights[i][2])+(li[3]* weights[i][3])+(bias[i]))
    predicted_class_index= ans.index(max(ans)) 
    # Check the predicted class index and print the corresponding label



    if predicted_class_index == 0:
        value = "Adzuki Beans"
    elif predicted_class_index == 1:
        value = "Black gram"
    elif predicted_class_index == 2:
        value = "Chickpea"
    elif predicted_class_index == 3:
        value = "Coconut"
    elif predicted_class_index == 4:
        value = "Coffee"
    elif predicted_class_index == 5:
        value = "Cotton"
    elif predicted_class_index == 6:
        value = "Ground Nut"
    elif predicted_class_index == 7:
        value = "Jute"
    elif predicted_class_index == 8:
        value = "Kidney Beans"
    elif predicted_class_index == 9:
        value = "Lentil"
    elif predicted_class_index == 10:
        value = "Moth Beans"
    elif predicted_class_index == 11:
        value = "Mung Bean"
    elif predicted_class_index == 12:
        value = "Peas"
    elif predicted_class_index == 13:
        value = "Pigeon Peas"
    elif predicted_class_index == 14:
        value = "Rubber"
    elif predicted_class_index == 15:
        value = "Sugarcane"
    elif predicted_class_index == 16:
        value = "Tea"
    elif predicted_class_index == 17:
        value = "Tobacco"
    elif predicted_class_index == 18:
        value = "Apple"
    elif predicted_class_index == 19:
        value = "Banana"
    elif predicted_class_index == 20:
        value = "Grapes"
    elif predicted_class_index == 21:
        value = "Maize"
    elif predicted_class_index == 22:
        value = "Mango"
    elif predicted_class_index == 23:
        value = "Millet"
    elif predicted_class_index == 24:
        value = "Muskmelon"
    elif predicted_class_index == 25:
        value = "Orange"
    elif predicted_class_index == 26:
        value = "Papaya"
    elif predicted_class_index == 27:
        value = "Pomegranate"
    elif predicted_class_index == 28:
        value = "Rice"
    elif predicted_class_index == 29:
        value = "Watermelon"
    elif predicted_class_index == 30:
        value = "Wheat"
    
    print(predicted_class_index)

    
    return value
    
print(score([20.87974371, 82.00274423, 6.502985292, 202.9355362]))
